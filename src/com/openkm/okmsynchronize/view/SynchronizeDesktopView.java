/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.openkm.okmsynchronize.view;

import com.openkm.okmsynchronize.model.AlertManagerModel;
import com.openkm.okmsynchronize.model.ContextOpenKMServer;
import com.openkm.okmsynchronize.model.LocalTreeModel;
import com.openkm.okmsynchronize.model.StateSynchronizeObject;
import com.openkm.okmsynchronize.model.SynchronizeDesktopModel;
import com.openkm.okmsynchronize.model.SynchronizedObject;
import com.openkm.okmsynchronize.model.SynchronizedFolder;
import com.openkm.okmsynchronize.view.utils.ImageList;
import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author abujosa
 */
public class SynchronizeDesktopView extends javax.swing.JFrame {

    /**
     * Creates new form SynchronizeDesktop
     */
    public SynchronizeDesktopView() {
        initComponents();
    }
    
    public SynchronizeDesktopView(SynchronizeDesktopModel model) {
        this.model = model;
        initComponents();
        // Maximised windows
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        // Initialize repository tree
        initRepositoryTree(model.getRepository().getRepositoryFoldersPath(), model.getRepository().getRepositoryDocumentsPath());
        
        // Initialize OpenKM server tree
        if(model.isConnectedToServer()) {
            initServerTree();        
        } else {
            desabledServerTree();
        }
        
        // Initialize table synchronized objects
        initObjectsTable();
        
        // Initialize buttons service
        if(model.getSynchronizeService().isRunning()) {
            buttonStartService.setEnabled(false);
            buttonStopService.setEnabled(true);
        } else {
            buttonStartService.setEnabled(true);
            buttonStopService.setEnabled(false);
        }       
        
        initializeNotifyArea();
    }
    
    public void initializeNotifyArea() {
        labelConnectionInfo.setText(model.getCredentials().getInfoConnection() + " ");
        if(model.isConnectedToServer()) {
            labelConnectionInfo.setIcon(ImageList.getImageIcon("com.openkm.odesktop.connection.ok"));
            labelConnectionInfo.setToolTipText("Connected to OpenKM");
        } else {
            labelConnectionInfo.setIcon(ImageList.getImageIcon("com.openkm.odesktop.connection.error"));
            labelConnectionInfo.setToolTipText("Not connected to OpenKM");
        } 
        
        // Error info
        setNotifyErrorInfo(model.haveNewError());
        
        // Notify alerts
        setNotifyAlertInfo(model.getAlertManager().isCheckAlertActive(AlertManagerModel.KeyChecks.KEY_NEW_ALERT));
        
        // Notify taskBar
        setNotifyTaskBar(model.getAlertManager().isCheckAlertActive(AlertManagerModel.KeyChecks.KEY_FODER_SYNCHRONIZE_RUNNING));

    }     
    
    public void setNotifyTaskBar(boolean active) {
        statusBarTask.setVisible(active);
        taskProgresBar.setIndeterminate(active);
        viewTaskButton.setVisible(false);
    }
    
    public void setNotifyErrorInfo(boolean newError) {
        labelErrorInfo.setVisible(newError);
    }
    
    public void setNotifyAlertInfo(boolean newAlert) {
        labelAlertInfo.setVisible(newAlert);
    }
    
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTop = new javax.swing.JPanel();
        toolBar = new javax.swing.JToolBar();
        buttonOptions = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        buttonStartService = new javax.swing.JButton();
        buttonStopService = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        buttonLog = new javax.swing.JButton();
        buttonAlerts = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        statusBarConnection = new javax.swing.JPanel();
        labelConnectionInfo = new javax.swing.JLabel();
        labelAlertInfo = new javax.swing.JLabel();
        labelErrorInfo = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        statusBarTask = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        taskProgresBar = new javax.swing.JProgressBar();
        viewTaskButton = new javax.swing.JButton();
        panelCenter = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        panelTableDocuments = new javax.swing.JScrollPane();
        tableObjects = new javax.swing.JTable();
        jSplitPane3 = new javax.swing.JSplitPane();
        panelServerTree = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        treeServer = new javax.swing.JTree();
        comboBoxContextServer = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        treeRepository = new javax.swing.JTree();
        panelRight = new javax.swing.JPanel();
        panelLeft = new javax.swing.JPanel();

        setTitle("Plataforma Integral de Trámites");

        toolBar.setRollover(true);
        toolBar.setToolTipText("Application actions");
        toolBar.setName("Actions"); // NOI18N

        buttonOptions.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/settings.png"))); // NOI18N
        buttonOptions.setText("Options");
        buttonOptions.setToolTipText("Chenge the options of application");
        buttonOptions.setDisplayedMnemonicIndex(0);
        buttonOptions.setFocusable(false);
        buttonOptions.setMaximumSize(new java.awt.Dimension(115, 47));
        buttonOptions.setMinimumSize(new java.awt.Dimension(115, 47));
        buttonOptions.setPreferredSize(new java.awt.Dimension(115, 47));
        buttonOptions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(buttonOptions);
        toolBar.add(jSeparator1);

        buttonStartService.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/play.png"))); // NOI18N
        buttonStartService.setText("Start");
        buttonStartService.setToolTipText("Start synchronize service");
        buttonStartService.setDisplayedMnemonicIndex(0);
        buttonStartService.setFocusable(false);
        buttonStartService.setPreferredSize(new java.awt.Dimension(115, 47));
        buttonStartService.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(buttonStartService);

        buttonStopService.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/stop.png"))); // NOI18N
        buttonStopService.setText("Stop");
        buttonStopService.setToolTipText("Stop synchronize service");
        buttonStopService.setDisplayedMnemonicIndex(1);
        buttonStopService.setFocusable(false);
        buttonStopService.setPreferredSize(new java.awt.Dimension(115, 47));
        buttonStopService.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(buttonStopService);
        toolBar.add(jSeparator2);

        buttonLog.setText("View log");
        buttonLog.setToolTipText("See application log");
        buttonLog.setDisplayedMnemonicIndex(5);
        buttonLog.setFocusable(false);
        buttonLog.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buttonLog.setMaximumSize(new java.awt.Dimension(115, 47));
        buttonLog.setMinimumSize(new java.awt.Dimension(115, 47));
        buttonLog.setPreferredSize(new java.awt.Dimension(115, 47));
        buttonLog.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(buttonLog);

        buttonAlerts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/swap.png"))); // NOI18N
        buttonAlerts.setText("View alerts");
        buttonAlerts.setToolTipText("See alert application");
        buttonAlerts.setDisplayedMnemonicIndex(5);
        buttonAlerts.setFocusable(false);
        buttonAlerts.setMaximumSize(new java.awt.Dimension(115, 47));
        buttonAlerts.setMinimumSize(new java.awt.Dimension(115, 47));
        buttonAlerts.setPreferredSize(new java.awt.Dimension(115, 47));
        buttonAlerts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(buttonAlerts);

        javax.swing.GroupLayout panelTopLayout = new javax.swing.GroupLayout(panelTop);
        panelTop.setLayout(panelTopLayout);
        panelTopLayout.setHorizontalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTopLayout.createSequentialGroup()
                .addContainerGap(218, Short.MAX_VALUE)
                .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 1184, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelTopLayout.setVerticalGroup(
            panelTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTopLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(panelTop, java.awt.BorderLayout.PAGE_START);

        statusBar.setToolTipText("Notify area");
        statusBar.setPreferredSize(new java.awt.Dimension(1023, 50));
        statusBar.setLayout(new java.awt.BorderLayout());

        labelConnectionInfo.setText("labelConnectionInfo");

        labelAlertInfo.setText("New Alert");

        labelErrorInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/alert.png"))); // NOI18N
        labelErrorInfo.setText("Error");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setMinimumSize(new java.awt.Dimension(3, 10));
        jSeparator3.setVerifyInputWhenFocusTarget(false);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout statusBarConnectionLayout = new javax.swing.GroupLayout(statusBarConnection);
        statusBarConnection.setLayout(statusBarConnectionLayout);
        statusBarConnectionLayout.setHorizontalGroup(
            statusBarConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarConnectionLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(labelConnectionInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelAlertInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelErrorInfo)
                .addContainerGap())
        );
        statusBarConnectionLayout.setVerticalGroup(
            statusBarConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusBarConnectionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusBarConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(statusBarConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(statusBarConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelConnectionInfo)
                            .addComponent(labelAlertInfo)
                            .addComponent(labelErrorInfo))))
                .addGap(17, 17, 17))
        );

        statusBar.add(statusBarConnection, java.awt.BorderLayout.LINE_START);

        jLabel1.setText("Sychn folder (run)");

        viewTaskButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/openkm/okmsynchronize/view/images/search.png"))); // NOI18N
        viewTaskButton.setMaximumSize(new java.awt.Dimension(20, 20));
        viewTaskButton.setMinimumSize(new java.awt.Dimension(20, 20));
        viewTaskButton.setPreferredSize(new java.awt.Dimension(20, 20));
        viewTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTaskButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusBarTaskLayout = new javax.swing.GroupLayout(statusBarTask);
        statusBarTask.setLayout(statusBarTaskLayout);
        statusBarTaskLayout.setHorizontalGroup(
            statusBarTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarTaskLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(taskProgresBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        statusBarTaskLayout.setVerticalGroup(
            statusBarTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusBarTaskLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusBarTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewTaskButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(taskProgresBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        statusBar.add(statusBarTask, java.awt.BorderLayout.LINE_END);

        getContentPane().add(statusBar, java.awt.BorderLayout.PAGE_END);

        panelCenter.setLayout(new java.awt.BorderLayout());

        tableObjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableObjects.setToolTipText("Synchronized objects table");
        tableObjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        panelTableDocuments.setViewportView(tableObjects);

        jSplitPane1.setRightComponent(panelTableDocuments);

        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane3.setMinimumSize(new java.awt.Dimension(150, 51));
        jSplitPane3.setPreferredSize(new java.awt.Dimension(300, 400));

        jScrollPane3.setViewportView(treeServer);

        comboBoxContextServer.setModel(new DefaultComboBoxModel(ContextOpenKMServer.getServerContextList()));

        javax.swing.GroupLayout panelServerTreeLayout = new javax.swing.GroupLayout(panelServerTree);
        panelServerTree.setLayout(panelServerTreeLayout);
        panelServerTreeLayout.setHorizontalGroup(
            panelServerTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(comboBoxContextServer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
        panelServerTreeLayout.setVerticalGroup(
            panelServerTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelServerTreeLayout.createSequentialGroup()
                .addComponent(comboBoxContextServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE))
        );

        jSplitPane3.setRightComponent(panelServerTree);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 425));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(221, 500));

        treeRepository.setMaximumSize(new java.awt.Dimension(500, 700));
        treeRepository.setMinimumSize(new java.awt.Dimension(200, 300));
        treeRepository.setPreferredSize(new java.awt.Dimension(200, 400));
        jScrollPane2.setViewportView(treeRepository);

        jSplitPane3.setLeftComponent(jScrollPane2);

        jSplitPane1.setLeftComponent(jSplitPane3);

        panelCenter.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(panelCenter, java.awt.BorderLayout.CENTER);

        panelRight.setPreferredSize(new java.awt.Dimension(20, 425));

        javax.swing.GroupLayout panelRightLayout = new javax.swing.GroupLayout(panelRight);
        panelRight.setLayout(panelRightLayout);
        panelRightLayout.setHorizontalGroup(
            panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelRightLayout.setVerticalGroup(
            panelRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        getContentPane().add(panelRight, java.awt.BorderLayout.LINE_END);

        panelLeft.setPreferredSize(new java.awt.Dimension(20, 425));

        javax.swing.GroupLayout panelLeftLayout = new javax.swing.GroupLayout(panelLeft);
        panelLeft.setLayout(panelLeftLayout);
        panelLeftLayout.setHorizontalGroup(
            panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelLeftLayout.setVerticalGroup(
            panelLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        getContentPane().add(panelLeft, java.awt.BorderLayout.LINE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTaskButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewTaskButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SynchronizeDesktopView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SynchronizeDesktopView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SynchronizeDesktopView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SynchronizeDesktopView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SynchronizeDesktopView().setVisible(true);
            }
        });
    }
    
    private void initRepositoryTree(String foldersPath, String documentsPaths) {                                      
        // Root node        
        LocalTreeModel rootModel = new LocalTreeModel(model.getRepository().getPath(), "Local", null, "R");
        rootNode = new DefaultMutableTreeNode(rootModel);               
        
        // Adding synchronized documents nodes
        LocalTreeModel documentsModel = new LocalTreeModel(model.getRepository().getRepositoryDocumentsPath(), "Synchronized Documents", null, "RD");        
        documentsNode = new DefaultMutableTreeNode(documentsModel);
        for(SynchronizedObject sobj : model.getRepository().getSyncronizedDocuments()) {
            LocalTreeModel nodeModel = new LocalTreeModel(sobj.getLocalPath(), sobj.getName(), sobj.getUuid(), "D");        
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeModel);
            documentsNode.add(node);
        }
        
         // Adding synchronized folders nodes
        LocalTreeModel foldersModel = new LocalTreeModel(model.getRepository().getRepositoryFoldersPath(), "Synchronized folders", null, "RF");        
        foldersNode = new DefaultMutableTreeNode(foldersModel);
        for(SynchronizedFolder sf : model.getRepository().getSynchronizedFolders()) {
            LocalTreeModel nodeModel = new LocalTreeModel(sf.getFolderLocalPath(), sf.getVirtualName(), sf.getFolderUUID(), "F");        
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeModel);
            foldersNode.add(node);
        }
        
        // Adding synchronized folders nodes & synchronized documents nodes to root
        rootNode.add(documentsNode);
        rootNode.add(foldersNode);        
        
        DefaultTreeModel modelo = new DefaultTreeModel(rootNode);
        treeRepository.setModel(modelo);     
        treeRepository.setExpandsSelectedPaths(Boolean.TRUE);
        
        // Initialize popup menu
        menuRepositoryTree = new JPopupMenu();

        menuItemOpenRepositoryFolder = new JMenuItem("Open in repository");        
        menuItemOpenBrowserFolder = new JMenuItem("Open in browser");       
        menuItemRemoveFolder = new JMenuItem("Remove");       

        menuRepositoryTree.add(menuItemRemoveFolder); 
        menuRepositoryTree.add(menuItemOpenRepositoryFolder); 
        menuRepositoryTree.add(menuItemOpenBrowserFolder);                
    }
    
    private void initServerTree() {

        String rootNodeName = model.getNameContextRootServerNode();
        ServerNodeTreeModel rootNode = new ServerNodeTreeModel(rootNodeName, null, null, Boolean.TRUE, Boolean.TRUE);
        DefaultMutableTreeNode rootTreeNode = new DefaultMutableTreeNode(rootNode);
        
        for(SynchronizedObject sobj : model.getChildrensServerNode(rootNodeName)) {
            ServerNodeTreeModel node = new ServerNodeTreeModel(sobj.getName(), sobj.getServerPath(), sobj.getUuid(), sobj.isFolder(), Boolean.FALSE);
            DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode(node);
            rootTreeNode.add(treeNode);
        }

        DefaultTreeModel modelo = new DefaultTreeModel(rootTreeNode);
        treeServer.setModel(modelo);  
        treeServer.setExpandsSelectedPaths(Boolean.TRUE);        
        
        // Initialize popup menu
        if (menuServerTree == null) {
            menuServerTree = new JPopupMenu();

            menuItemSynchronizeServerFolder = new JMenuItem("Synchronize folder");
            menuItemSynchronizeServerDocument = new JMenuItem("Synchronize document");
            menuItemGoServer = new JMenuItem("Open in browser");

            menuServerTree.add(menuItemSynchronizeServerFolder);
            menuServerTree.add(menuItemSynchronizeServerDocument);
            menuServerTree.add(menuItemGoServer);
        }
    }        
    
    private void initObjectsTable() {               
        SynchronizedObjectsTableModel mod = new SynchronizedObjectsTableModel(new ArrayList<SynchronizedObject>());
        tableObjects.setModel(mod);
        
        tableObjects.setDefaultRenderer (Object.class, new TableSynchronizedObjectsRender());
        
        // Initialize PopupMenu table
        menuTableObjects = new JPopupMenu();        
        menuItemTableGoRepository = new JMenuItem("Open in repository");
        menuItemTableGoServer = new JMenuItem("Open in browser");        
        menuItemTableInfo = new JMenuItem("Information");       
        menuItemTableResolve = new JMenuItem("Resolve conflict");       
        
        menuTableObjects.add(menuItemTableGoRepository);
        menuTableObjects.add(menuItemTableGoServer);
        menuTableObjects.add(menuItemTableInfo);
        menuTableObjects.add(menuItemTableResolve);
        
        tableObjects.setComponentPopupMenu(menuTableObjects);
    }
    
    private DefaultMutableTreeNode getSelectedServerTreeNode() {
        TreePath selectedPath = treeServer.getSelectionPath();
        DefaultMutableTreeNode selectedNode = null;        
        if (selectedPath != null) {
            Object o = selectedPath.getLastPathComponent();
            if (o instanceof DefaultMutableTreeNode) {
                selectedNode = (DefaultMutableTreeNode) o;
                if (selectedNode.getUserObject() != null) {
                    return selectedNode;
                }
            }
        }
        return null;
    } 
    
    private DefaultMutableTreeNode getSelectedRepositoryTreeNode() {
        TreePath selectedPath = treeRepository.getSelectionPath();        
        DefaultMutableTreeNode selectedNode = null;        
        if (selectedPath != null) {
            Object o = selectedPath.getLastPathComponent();
            if (o instanceof DefaultMutableTreeNode) {
                selectedNode = (DefaultMutableTreeNode) o;
                if (selectedNode.getUserObject() != null) {
                    return selectedNode;
                }
            }
        }
        return null;
    }             
    
    private boolean isExpandedLocalSelectedNode() {
        TreePath selectedPath = treeRepository.getSelectionPath();        
        if (selectedPath != null) {
            return treeRepository.isExpanded(selectedPath);
        }
        return false;
    }     
      
    /**
     * Public method    
     */
    
    public void modifiedSelectedTableRow(SynchronizedObject sobj) {
        int row = tableObjects.getSelectedRow();
        ((SynchronizedObjectsTableModel)tableObjects.getModel()).changeRowValue(row, sobj);
    }       
    
    public LocalTreeModel getSelectedLocalNode() {       
        DefaultMutableTreeNode selectedNode = getSelectedRepositoryTreeNode();         
        if (selectedNode != null) {
            LocalTreeModel node =  (LocalTreeModel) selectedNode.getUserObject();
            node.setExpanded(isExpandedLocalSelectedNode());
            return node;
        } else {
            return null;
        }
    }
    
    public void refreshSynchronizedFolderNode(boolean expandPath) {        
        DefaultTreeModel treeModel = (DefaultTreeModel) treeRepository.getModel();
        while(foldersNode.children().hasMoreElements()) {
            treeModel.removeNodeFromParent((DefaultMutableTreeNode)foldersNode.children().nextElement());
        }
        for(SynchronizedFolder sf : model.getRepository().getSynchronizedFolders()) {
            LocalTreeModel childModel = new LocalTreeModel(sf.getFolderLocalPath(), sf.getVirtualName(), sf.getFolderUUID(), "F");        
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(childModel);
            treeModel.insertNodeInto(child, foldersNode, foldersNode.getChildCount());
        }     
        
        if(expandPath) {
            treeRepository.expandPath(treeRepository.getSelectionPath());
        }        
    }  
    
    public void refreshSynchronizedDocumentsNode(boolean expandPath) {        
        DefaultTreeModel treeModel = (DefaultTreeModel) treeRepository.getModel();
        while(documentsNode.children().hasMoreElements()) {
            treeModel.removeNodeFromParent((DefaultMutableTreeNode)documentsNode.children().nextElement());
        }
        for(SynchronizedObject sobj : model.getRepository().getSyncronizedDocuments()) {
            LocalTreeModel childModel = new LocalTreeModel(sobj.getLocalPath(), sobj.getName(), sobj.getUuid(), "D");        
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(childModel);
            treeModel.insertNodeInto(child, documentsNode, documentsNode.getChildCount());
        }     
        
        if(expandPath) {
            treeRepository.expandPath(treeRepository.getSelectionPath());
        }        
    }
    
    public ServerNodeTreeModel getSelectedServerTreNode() {
        DefaultMutableTreeNode selectNode = getSelectedServerTreeNode();
        if(selectNode != null) {
            return (ServerNodeTreeModel) selectNode.getUserObject();
        } else {
            return null;
        }
    }
    
    public void refreshSynchronizedDocumentsTreeNode() {
        DefaultMutableTreeNode selectNode = getSelectedRepositoryTreeNode();
        selectNode.removeAllChildren();
        for(SynchronizedObject syncDocument : model.getRepository().getSyncronizedDocuments()) {
            RepositoryNodeTreeModel childNode = new RepositoryNodeTreeModel(syncDocument.getName(), syncDocument.getName(), syncDocument.getLocalPath(), syncDocument.getLocalPath(), "-1", Boolean.FALSE, Boolean.TRUE, syncDocument.isFolder());        
            DefaultMutableTreeNode childTreeNode = new DefaultMutableTreeNode(childNode);
            selectNode.add(childTreeNode);            
        }        
    }
    
    public void refreshSelectedRepositoryTreNode(List<RepositoryNodeTreeModel> childrens, boolean expandRoot) {
        DefaultMutableTreeNode selectedNode = getSelectedRepositoryTreeNode();   
        TreePath tp = new TreePath(selectedNode.getPath());
        if (selectedNode != null) {
            // Remove not existing nodes
        	List<TreeNode> auxNodes = Collections.list(selectedNode.children());
        	List<DefaultMutableTreeNode> nowNodes = new ArrayList(); 
        	for(TreeNode auxnode : auxNodes ) {
        		nowNodes.add((DefaultMutableTreeNode)auxnode);
        	}
            List<RepositoryNodeTreeModel> nowModelNodes = new ArrayList<RepositoryNodeTreeModel>();
            for(DefaultMutableTreeNode treeNode : nowNodes) {
                RepositoryNodeTreeModel node = (RepositoryNodeTreeModel)treeNode.getUserObject();                
                if(!childrens.contains(node)) { 
                    ((DefaultTreeModel) treeRepository.getModel()).removeNodeFromParent(treeNode);
                }
                else { nowModelNodes.add(node);}
            }                        
            
            // Adding news nodes
            for (RepositoryNodeTreeModel child : childrens) {
                if(!nowModelNodes.contains(child)) { selectedNode.add(new DefaultMutableTreeNode(child)); }
            }                                                
            // Refresh tree model
            treeRepository.setModel(treeRepository.getModel());  
            treeRepository.setSelectionPath(tp);            
            if(expandRoot) { treeRepository.expandRow(0); }
        }
    }
    
    public void refreshSelectedServerTreNode(List<ServerNodeTreeModel> childrens) {
        DefaultMutableTreeNode selectedNode = getSelectedServerTreeNode();
        TreePath tp = new TreePath(selectedNode.getPath());
        if(selectedNode != null) {           
            // Remove not existing nodes
        	List<TreeNode> auxNodes = Collections.list(selectedNode.children());
        	List<DefaultMutableTreeNode> nowNodes = new ArrayList(); 
        	for(TreeNode auxnode : auxNodes ) {
        		nowNodes.add((DefaultMutableTreeNode)auxnode);
        	}
            List<ServerNodeTreeModel> nowModelNodes = new ArrayList<ServerNodeTreeModel>();
            for(DefaultMutableTreeNode treeNode : nowNodes) {
                ServerNodeTreeModel node = (ServerNodeTreeModel)treeNode.getUserObject();                
                if(!childrens.contains(node)) { 
                    ((DefaultTreeModel) treeServer.getModel()).removeNodeFromParent(treeNode);
                }
                else { nowModelNodes.add(node);}
            }                        
            
            // Adding news nodes
            for (ServerNodeTreeModel child : childrens) {
                if(!nowModelNodes.contains(child)) { selectedNode.add(new DefaultMutableTreeNode(child)); }
            }
            
            // Refresh tree model
            treeServer.setModel(treeServer.getModel());
            treeServer.setSelectionPath(tp);            
        }
    }
    
    public void desabledServerTree() {
        treeServer.setEnabled(false);
        
        String rootNodeName = "Not connected to OpenKM";
        ServerNodeTreeModel rootNode = new ServerNodeTreeModel(rootNodeName, null, null, Boolean.TRUE, Boolean.TRUE);
        DefaultMutableTreeNode rootTreeNode = new DefaultMutableTreeNode(rootNode);                

        DefaultTreeModel modelo = new DefaultTreeModel(rootTreeNode);
        treeServer.setModel(modelo);
        
        // Disabled context server
        comboBoxContextServer.setEnabled(false);
        
        // Initialize popup menu
        if (menuServerTree == null) {
            menuServerTree = new JPopupMenu();

            menuItemSynchronizeServerFolder = new JMenuItem("Synchronize folder");
            menuItemSynchronizeServerDocument = new JMenuItem("Synchronize document");
            menuItemGoServer = new JMenuItem("Open in browser");

            menuServerTree.add(menuItemSynchronizeServerFolder);
            menuServerTree.add(menuItemSynchronizeServerDocument);
            menuServerTree.add(new JPopupMenu.Separator());
            menuServerTree.add(menuItemGoServer);          
        }
    }
    
    /**
     * Refresh tree server
     */
    public void refreshServerTree() {
        initServerTree();
        treeServer.setEnabled(true);
        comboBoxContextServer.setEnabled(true);
    }
    
    /**
     * Refresh tree server
     */
    public void refreshRepositoryTree() {
        initRepositoryTree(model.getRepository().getRepositoryFoldersPath(), model.getRepository().getRepositoryDocumentsPath());
    }
    
    /**
     * Refresh Synchronized objects table     
     */
    public void refreshTableObjects(List<SynchronizedObject> list) {
        ((SynchronizedObjectsTableModel)tableObjects.getModel()).refreshTableContent(list);
    }  
    
    /**
     * Show de Pop-up menu server tree     
     * 
     * @param type folder | document | root
     */
    public void showPopupMenuServerTree(String type, int x, int y) {        
        
        menuItemGoServer.setVisible(true);
        
        if("folder".equals(type)) {
            // Show folders acctions
            
            menuItemSynchronizeServerFolder.setVisible(true);
            menuItemSynchronizeServerDocument.setVisible(false);            
            
        } else if("document".equals(type)) {
            menuItemSynchronizeServerFolder.setVisible(false);
            menuItemSynchronizeServerDocument.setVisible(true);
            
        } else if("root".endsWith(type)) {
            menuItemSynchronizeServerFolder.setVisible(false);
            menuItemSynchronizeServerDocument.setVisible(false);
        }
        
        TreePath treePath = treeServer.getClosestPathForLocation(x, y);
        Rectangle pathBounds = treeServer.getUI().getPathBounds(treeServer, treePath);
        if(pathBounds != null && pathBounds.contains(x, y)) {
            menuServerTree.show(treeServer, pathBounds.x, pathBounds.y + pathBounds.height);
        }
        
    /**
     * Show de Pop-up menu table  
     * 
     * @param type folder | document
     */
    }
    
    /**
     * Show de Pop-up menu repository tree     
     * 
     * @param type folder | document
     */
    public void showPopupMenuRepositoryTree(int x, int y) {                      
        TreePath treePath = treeRepository.getClosestPathForLocation(x, y);
        Rectangle pathBounds = treeRepository.getUI().getPathBounds(treeRepository, treePath);
        if(pathBounds != null && pathBounds.contains(x, y)) {
            menuRepositoryTree.show(treeRepository, pathBounds.x, pathBounds.y + pathBounds.height);
        }
    }
    
    // Method controller
    // Buttons
    public void addButtonOptionsListener(ActionListener l) { buttonOptions.addActionListener(l); }
    public void addButtonLogListener(ActionListener l) { buttonLog.addActionListener(l); }
    public void addButtonAlertListener(ActionListener l) { buttonAlerts.addActionListener(l); }
    public void addButtonStartServiceListener(ActionListener l) { buttonStartService.addActionListener(l); }
    public void addButtonStopServiceListener(ActionListener l) { buttonStopService.addActionListener(l); }
        
    // ComboBox
    public void addComboBoxContextServerListener(ActionListener l) { comboBoxContextServer.addActionListener(l); }
    
    // Tree
    public void addTreeRepositoryListener(MouseListener l) { treeRepository.addMouseListener(l); }
    public void addTreeServeryListener(MouseListener l) { treeServer.addMouseListener(l); }
    
    //MenuItem server tree
    public void addMenuItemServerTreeListener(ActionListener l) {        
        menuItemGoServer.addActionListener(l);
        menuItemSynchronizeServerFolder.addActionListener(l);
        menuItemSynchronizeServerDocument.addActionListener(l);
    }
    
    //MenuItem repository tree
    public void addMenuItemRepositoryTreeListener(ActionListener l) {
        menuItemOpenRepositoryFolder.addActionListener(l);
        menuItemOpenBrowserFolder.addActionListener(l);
        menuItemRemoveFolder.addActionListener(l);        
    }       
    
    // Table listener
    public void addMenuItemTableObjectsListener(ActionListener l) { 
        menuItemTableGoServer.addActionListener(l); 
        menuItemTableGoRepository.addActionListener(l); 
        menuItemTableInfo.addActionListener(l); 
        menuItemTableResolve.addActionListener(l); 
    }
    
    // Windows listener
    public void addDesktopWindowListener(WindowListener l) { addWindowListener(l); }
    
    // Labels Actions
    public void addLabelInfoActionListener(MouseListener l) {
        labelAlertInfo.addMouseListener(l);
        labelErrorInfo.addMouseListener(l);
    }
    
    public ContextOpenKMServer getcontextOpenKMServer() {        
        return ContextOpenKMServer.getByContext((String)comboBoxContextServer.getModel().getSelectedItem());        
    }
    
    public SynchronizedObject getSynchronizeObjectSelectedRow() {
        int row = tableObjects.getSelectedRow();
        return ((SynchronizedObjectsTableModel)tableObjects.getModel()).getSelectedSynchronizeObject(row);
    }
    
    public void setEnabledButtonStartService(boolean enabled) { buttonStartService.setEnabled(enabled); }
    public void setEnabledButtonStopService(boolean enabled) { buttonStopService.setEnabled(enabled); }
    
    private SynchronizeDesktopModel model;
    private JPopupMenu menuServerTree;
    private JMenuItem menuItemSynchronizeServerFolder;
    private JMenuItem menuItemSynchronizeServerDocument;
    private JMenuItem menuItemGoServer;
    private JPopupMenu menuRepositoryTree;
    private JMenuItem menuItemOpenRepositoryFolder;
    private JMenuItem menuItemOpenBrowserFolder;
    private JMenuItem menuItemRemoveFolder;
    private JPopupMenu menuTableObjects;
    private JMenuItem menuItemTableGoServer;
    private JMenuItem menuItemTableGoRepository;
    private JMenuItem menuItemTableInfo;
    private JMenuItem menuItemTableResolve;
    
    // synchronized repository tree
    DefaultMutableTreeNode rootNode;
    DefaultMutableTreeNode foldersNode;
    DefaultMutableTreeNode documentsNode;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAlerts;
    private javax.swing.JButton buttonLog;
    private javax.swing.JButton buttonOptions;
    private javax.swing.JButton buttonStartService;
    private javax.swing.JButton buttonStopService;
    private javax.swing.JComboBox comboBoxContextServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JLabel labelAlertInfo;
    private javax.swing.JLabel labelConnectionInfo;
    private javax.swing.JLabel labelErrorInfo;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelRight;
    private javax.swing.JPanel panelServerTree;
    private javax.swing.JScrollPane panelTableDocuments;
    private javax.swing.JPanel panelTop;
    private javax.swing.JPanel statusBar;
    private javax.swing.JPanel statusBarConnection;
    private javax.swing.JPanel statusBarTask;
    private javax.swing.JTable tableObjects;
    private javax.swing.JProgressBar taskProgresBar;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JTree treeRepository;
    private javax.swing.JTree treeServer;
    private javax.swing.JButton viewTaskButton;
    // End of variables declaration//GEN-END:variables

    private class TableSynchronizedObjectsRender extends DefaultTableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            
            if (column == 5 && StateSynchronizeObject.CONFLICT.getDescription().equals((String) value)) {
                //this.setOpaque(true);
                //this.setBackground(Color.ORANGE);
                //this.setForeground(Color.BLACK);
            } else {
                // Restaurar los valores por defecto
            }

            return this;
        }
        
    }
}
